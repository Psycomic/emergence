(do
  (comptime
   (set-macro! (quote define-macro)
			   (named-lambda define-macro (name args body)
							 (list (quote comptime)
								   (list (quote set-macro!)
										 (list (quote quote) name)
										 (list (quote named-lambda)
											   name
											   args
											   body))))))

  (define-macro defun (name args body)
	(list (quote do)
		  (list (quote comptime)
				(list (quote register-function!)
					  (list (quote quote) name)
					  (length args)))
		  (list (quote set-global!)
				(list (quote quote) name)
				(list (quote named-lambda)
					  name
					  args
					  body))
		  (list (quote quote) name)))

  (comptime
   (defun cond-helper (clauses)
	 (if (null? clauses)
		 nil
		 (let ((c (head clauses)))
		   (list (quote if) (head c)
				 (second c)
				 (cond-helper (tail clauses))))))

   (defun map-helper (fn lst acc)
	 (if (null? lst)
		 (reverse! acc)
		 (map-helper fn (tail lst)
					 (: (fn (head lst)) acc))))

   (defun map (fn lst)
	 (map-helper fn lst nil))

   (defun quasiquote-helper (expression)
	 (if (list? expression)
		 (if (eq? (head expression) (quote unquote))
			 (second expression)
			 (: (quote list)
				(map quasiquote-helper expression)))
		 (list (quote quote) expression))))

  (define-macro cond (clauses)
	(cond-helper clauses))

  (define-macro quasiquote (expression)
	(quasiquote-helper expression))

  (define-macro lambda (args body)
	(quasiquote
	 (named-lambda anon (unquote args)
				   (unquote body))))

  (define-macro define (symbol value)
	(quasiquote
	 (do (comptime (register-global! (quote (unquote symbol))))
		 (set-global! (quote (unquote symbol))
					  (unquote value)))))

  (defun range-helper (max acc)
	(if (= max 0)
		(: max acc)
		(range-helper (- max 1)
					  (: max acc))))

  (defun range (x) (range-helper x nil)))
