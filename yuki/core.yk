(do
  (comptime
   (set-macro! (quote define-macro)
			   (named-lambda define-macro (name args body)
							 (list (quote comptime)
								   (list (quote set-macro!)
										 (list (quote quote) name)
										 (list (quote named-lambda)
											   name
											   args
											   body))))))

  (define-macro define (symbol value)
	(list (quote do)
		  (list (quote comptime)
				(list (quote register-global!)
					  (list (quote quote) symbol)))
		  (list (quote set-global!)
				(list (quote quote) symbol)
				value)))

  (define-macro defun (name args body)
	(list (quote do)
		  (list (quote comptime)
				(list (quote register-function!)
					  (list (quote quote) name)
					  (length args)))
		  (list (quote set-global!)
				(list (quote quote) name)
				(list (quote named-lambda)
					  name
					  args
					  body))
		  (list (quote quote) name)))

  (defun cond-helper (clauses)
	(if (null? clauses)
		nil
		(let ((c (head clauses)))
		  (list (quote if) (head c)
				(second c)
				(cond-helper (tail clauses))))))

  (cond-helper (quote (((= x 0) (x-is-zero))
					 ((> x 0) (x-is-superior))
					 (t (x-is-inferior))))))
