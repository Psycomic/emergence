(do
	(comptime
	 (set-macro! 'macro
				 (named-lambda macro (name args body)
							   (list 'comptime
									 (list 'set-macro!
										   (list 'quote name)
										   (list 'named-lambda
												 name
												 args
												 body))))))

	(macro func (name args . body)
		   (list 'do
				 (list 'comptime
					   (list 'register-function!
							 (list 'quote name)
							 (lambda-list-length args)))
				 (list 'set-global!
					   (list 'quote name)
					   (append (list 'named-lambda
									 name args)
							    body))
				 (list 'quote name)))

  (comptime
   (func 1+ (x) "Add one to `x'" (+ x 1))
   (func 1- (x) "Substract one to `x'" (- x 1))

   (func cond-helper (clauses)
		 (if (null? clauses)
			 nil
			 (let ((c (head clauses)))
			   (list 'if (head c)
					 (second c)
					 (cond-helper (tail clauses))))))

   (func map-helper (fn lst acc)
		 (if (null? lst)
			 (reverse! acc)
			 (map-helper fn (tail lst)
						 (: (fn (head lst)) acc))))

   (func map (fn lst)
		 "Applies the function `fn' to every element in lst
and returns a list containing the results"
		 (map-helper fn lst nil))

   (func enumerate-helper (fn lst i acc)
		 (if (null? lst)
			 (reverse! acc)
			 (enumerate-helper fn (tail lst) (1+ i)
							   (: (fn i (head lst)) acc))))

   (func enumerate (fn lst)
		 "Like map, but adds a counter as a first parameter"
		 (enumerate-helper fn lst 0 nil))

   (func quasiquote-helper (expression)
		 (if (list? expression)
			 (if (eq? (head expression) 'unquote)
				 (second expression)
				 (if (null? expression)
					 nil
					 (: 'list (map quasiquote-helper expression))))
			 (list 'quote expression))))

  (macro quasiquote (expression)
		 (quasiquote-helper expression))

  (macro cond clauses
		 (cond-helper clauses))

  (macro lambda (args . body)
		 (append (list 'named-lambda 'anon args)
				 body))

  (macro and (a b)
		 (quasiquote
		  (if (unquote a) (unquote b) nil)))

  (macro when (condition . body)
		 (list 'if condition
			   (append (list 'do) body)
			   nil))

  (macro define (symbol value)
		 (quasiquote
		  (do (comptime (register-global! '(unquote symbol)))
			  (set-global! '(unquote symbol) (unquote value)))))

  (func range-helper (max acc)
		(if (= max 0)
			(: max acc)
			(range-helper (- max 1)
						  (: max acc))))

  (func range (x)
		"Return a list containing every number between 0 and `x' (included)"
		(range-helper x nil))

  (func assert-fn (value error)
		(if value value
			(invoke-debugger 'assertion-error)))

  (macro assert (value)
		 (quasiquote
		  (assert-fn (unquote value) '(unquote value))))

  (define pi 3.1415)

  (macro times (i count . body)
		 (let ((count-sym (gensym))
			   (cont-sym (gensym)))
		   (quasiquote
			(let (((unquote i) 0)
				  ((unquote count-sym) (unquote count)))
			  (with-cont (unquote cont-sym)
						 (loop (if (>= (unquote i) (unquote count-sym))
								   (exit (unquote cont-sym) (unquote i))
								   (do (unquote (head body))
									   (set! (unquote i)
											 (+ (unquote i) 1))))))))))

  (macro method (class name lambda-list . body)
		 (list 'set-method! (list 'find-class (list 'quote class))
			   (list 'quote name)
			   (append (list 'lambda lambda-list)
					   body)))

  (macro send (object method . args)
		 (append (list 'call-method object (list 'quote method))
				 args))

  (macro class (name parent . attributes)
		 (let ((is-superclass (if (null? parent) t
								(if (eq? parent 'object)
									t nil))))
		   (append (list 'do
						 (quasiquote
						  (set-class! '(unquote name) '(unquote (if (null? parent) 'object parent))
									  (unquote (length attributes)))))
				   (list (quasiquote
						  (func (unquote (make-symbol (string-concat (symbol-string name) "?")))
								(instance)
								(subtype? (type-of instance) '(unquote name)))))
				   (enumerate (lambda (i a)
								(quasiquote
								 (method (unquote name) (unquote a)
										 (self)
										 (get-slot self (unquote
														 (if is-superclass i (1+ i)))))))
							  attributes))))

  (func search (lst element key)
		(cond ((null? lst) nil)
			  ((eq? (key (first lst)) element)
			   (first lst))
			  (t (search (tail lst) element key))))

  (class error ())

  (define *handler-clusters* nil)

  (macro handler-bind (bindings . forms)
		 (let ((make-binding
				(lambda (binding)
				  (quasiquote
				   (list '(unquote (first binding))
						 (unquote (second binding)))))))
		   (let ((cluster (map make-binding bindings)))
			 (append (list 'dynamic-let
						   (list (list '*handler-clusters*
									   (list 'append
											 (append (list 'list)
													 cluster)
											 '*handler-clusters*))))
					 forms))))

  (macro handler-case (form . cases)
		 (let ((cont-sym (gensym)))
		   (let ((make-binding
				  (lambda (binding)
					(list (first binding)
						  (append (list 'lambda (second binding))
								  (list (list 'exit cont-sym
											  (append (list 'do)
													  (tail (tail binding))))))))))
			 (list 'with-cont cont-sym
				   (list 'handler-bind
						 (map make-binding cases)
						 form)))))

  (func error (e . args)
		(assert (error? e))
		(let ((type (type-of e)))
		  (let ((l (Y (lambda (l)
						(lambda (handlers)
						  (when handlers
							(let ((handler (first handlers)))
							  (if (subtype? type (first handler))
								  ((second handler) e)
								  (l (tail handlers))))))))))
			(l *handler-clusters*))
		  (invoke-debugger e)))

  (func make-board (size)
		"Makes a Game of Life board of size `size'"
		(let ((board (make-array (* size size) 0)))
		  (board-set! board size 1 0 1)
		  (board-set! board size 2 1 1)
		  (board-set! board size 0 2 1)
		  (board-set! board size 1 2 1)
		  (board-set! board size 2 2 1)
		  board))

  (func board-get (board size x y)
		"Get the cell in position (x, y)"
		(aref board (+ (* x size) y)))

  (func board-set! (board size x y val)
		"Set the cell in position (x, y) to `val'"
		(aset! board (+ (* x size) y) val))

  (func neighbors (board size x y)
		"Returns the numbers of neighbors in position (x, y)"
		(+ (board-get board size (mod (1+ x) size) y)
		   (board-get board size (mod (1+ x) size) (mod (1+ y) size))
		   (board-get board size (mod (1+ x) size) (mod (1- y) size))
		   (board-get board size (mod (1- x) size) y)
		   (board-get board size (mod (1- x) size) (mod (1+ y) size))
		   (board-get board size (mod (1- x) size) (mod (1- y) size))
		   (board-get board size x (mod (1+ y) size))
		   (board-get board size x (mod (1- y) size))))

  (func next-board (board size)
		"Returns the next step in the game of life"
		(let ((new-board (make-array (* size size) 0)))
		  (times x size
				 (times y size
						(let ((c (board-get board size x y))
							  (n (neighbors board size x y)))
						  (board-set! new-board size x y
									  (if (= c 1)
										  (cond ((= n 2) 1)
												((= n 3) 1)
												(t 0))
										  (if (= n 3) 1 0))))))
		  new-board))

  (define *board* (make-board 10))

  (func next-step ()
		(set! *board* (next-board *board* 10)))

  (func benchmark ()
		(let ((t1 (clock)))
		  (times i 500 (next-step))
		  (- (clock) t1)))

  (func stream-test ()
		(let ((out (make-string-output-stream)))
		  (write-char! out 65)
		  (write-char! out 54)
		  (write-char! out 10)
		  (write-char! out 12405)
		  (write-char! out 10)
		  (let ((result (stream-string out)))
			(stream-close out)
			result)))

  (func output-test ()
		(let ((ss (make-string-output-stream)))
		  (dynamic-let ((*output* ss))
					   (print '(hello world)))
		  (stream-string ss)))

  (func make-person (name age)
		(lambda (msg . args)
		  (cond ((eq? msg 'get-name) name)
				((eq? msg 'set-name)
				 (set! name (head args)))
				((eq? msg 'get-age) age)
				((eq? msg 'set-age)
				 (set! age (head args)))
				(t (quote message-not-understood)))))

  (define ewen (make-person "Ewen" 16))

  (define 2+5 (((let ((x 5))
				  (lambda (y) (lambda () (+ x y)))) 2)))

  (define Y                 ; (Y f) = (g g) where
	(named-lambda x (f)             ;         (g g) = (f  (lambda a (apply (g g) a)))
				  ((named-lambda y (g) (g g))   ; (Y f) ==        (f  (lambda a (apply (Y f) a)))
				   (named-lambda z (g)
								 (f (named-lambda w (a) ((g g) a)))))))

  (define fact
	(Y (named-lambda fugg (r)
					 (named-lambda DDDD (x)
								   (if (< x 2) 1
									   (* x (r (- x 1))))))))

  (func test-closure-cont ()
		(let ((i 0)
			  (fn nil))
		  (with-cont c
					 (let ((a (lambda (x)
								(if (> x (+ i 5))
									(exit c 5)
									nil))))
					   (set! fn a)
					   (loop
						(a i)
						(set! i (1+ i)))))
		  (list i fn)))

  (class type-error error
	expected-type given-type)
  (class division-by-zero-error error
	numerator)

  (func divide (a b)
		(if (= b 0)
			(error (make-instance 'division-by-zero-error a))
			(/ a b)))

  (func test-errors (x)
		(handler-case (let ((a (divide 4 x)))
						(print "Fuck yeah")
						(* a 89))
					  (division-by-zero-error (e)
											  (print "Got error")
											  e)
					  (error (e)
							 (print "other error")
							 e)))

  (func test-psyche ()
		(let ((window (ps-make-window "Hello"))
			  (button (ps-make-button "Hey!" 15.0)))
		  (ps-window-set-root window button)
		  (list window button)))

  (class point () x y)
  (class 3d-point point z))
