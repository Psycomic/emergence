* The Yuki virtual machine
** Stacks
   Several stacks are needed for the Yuki virtual machine to work
   correctly:

   - The Yuki stack, contains the current frame activation record as
     well as function parameters, local variables, and return addresses.
   - The continuations stack, to save created continuations (they have
     their own namespace)
   - The dynamic bindings stack, to restore the dynamically-bound
     variables to their old value.

** Registers
   There are 3 registers:
   - The =values_register=, where the return value of a function is when
     it finished its execution
   - The =program_counter=, points to the current instruction
   - The =bytecode_register=, points to the current byte code object
     being executed.
   - The ~stack_pointer~, points to the top of the lisp stack
   - The ~frame_pointer~, points right after the activation frame, is
     used to access the lexical environment, and unbind the stack
     after a call

** Internal stack workings and function application

   =(hello a b c)=

   |-------------------|
   | Bytecode register |
   | Return address    |
   | Frame pointer     |
   |-------------------|
   | Argument 0: a     |
   | Argument 1: b     |
   | Argument 2: c     |
   | Local 0           |
   | Local 1           |
   | Local 2           |
   | ...               |
   +-------------------+

   This is a table representing a Yuki stack frame. The frame pointer
   points to the location of the previously saved frame pointer, and
   is used to access the locals and arguments to the called function.

   With this calling convention, the bytecode for this:
   #+BEGIN_SRC scheme
	 (let ((a 5) (b 6))
	   (+ (* a 5)
		  (- 66 b)))
   #+END_SRC
   could look like this
   #+BEGIN_SRC lisp
0	 (fetch-literal 5)
1	 (push)
2 	 (fetch-literal 6)
3	 (push)
4	 (prepare-call 11)
5	 (lexical-var 4)
6	 (push)
7	 (fetch-literal 5)
8	 (push)
9	 (fetch-literal *)
10	 (call 2)
11	 (push)
12	 (prepare-call 19)
13	 (fetch-literal 66)
14	 (push)
15	 (lexical-var 5)
16	 (push)
17	 (fetch-literal -)
18	 (call 2)
19	 (push)
20	 (fetch-literal +)
21	 (tail-call 2)
   #+END_SRC

** Instructions and opcodes
   An instruction is represented on 88 bits, and has 3 parts: the
   opcode, the modifier and the pointer.

   Below is a table showing the instructions with their arguments
   supported by the Yuki virtual machine

   | *Pointer*            | *Modifier*             | *Opcode*        |
   |--------------------+----------------------+---------------|
   | 64 bits            | 16 bits              | 8 bits        |
   |--------------------+----------------------+---------------|
   | Pointer to literal | X                    | =FETCH_LITERAL= |
   | Pointer to symbol  | X                    | =FETCH_GLOBAL=  |
   | X                  | Lexical index        | =LEXICAL_VAR=   |
   | X                  | X                    | =PUSH=          |
   | X                  | Lexical binding size | =UNBIND=        |
   | X                  | Number of arguments  | =CALL=          |
   | X                  | Number of arguments  | =TAIL_CALL=     |
   | X                  | X                    | =RET=           |
   | X                  | Byte code index      | =JMP=           |
   | X                  | Byte code index      | =JNIL=          |
   | X                  | X                    | =END=           |
   |--------------------+----------------------+---------------|

*** Description of the instructions
	- =FETCH_LITERAL=: Puts the pointer of the instruction in
      =value_register=.
	- =FETCH_GLOBAL=: Gets the global Deep-bound value stored inside the
      symbol passed as argument, and puts it in =value_register=
	- =LEXICAL_VAR=: Gets the -nth value pushed onto the Yuki stack and
      stores it in =value_register=.
	- =PUSH=: Pushes =value_register= onto the Yuki stack, to be accessed
      later with =LEXICAL_VAR=.
	- =UNBIND=: Subtracts *Modifier* from the Yuki stack pointer,
      unbinding previously =PUSHed= values.
	- =CALL=: If =value_register= is a compiled function, just call it
      with *Modifier* as argument, indicating the number of arguments
      passed to the function. If it is a byte compiled function, save
      the next instruction on the return stack as well as the
      =bytecode_register=, push *Modifier* on the Yuki stack, and put the
      pointer to the code of the function into =program_counter=.
	- =TAIL_CALL=: Same as =CALL=, but does not save the return value of
      the call, and unbinds the current stack frame to replace it with
      the calling stack frame. Used to implement iterative constructs.
	- =RET=: Unbinds the stack frame of the function by subtracting the
      arguments count from the stack pointer, and jumps back to the
      caller by popping the top of the return stack into
      =program_counter=, and popping the byte code object into
      =bytecode_register=
	- =JMP=: Unconditional jump. Jumps to the code of =bytecode_register=
      indexed by *Modifier*.
	- =JNIL=: Conditional jump. Jumps to the code of =bytecode_register=
      indexed by *Modifier* only if =value_register= is NIL.

** Environments
*** Global environment
	The global environment is implemented by putting a value field
	directly inside of a symbol.  Dynamic binding is optional, and can
	be enabled using =dynamic-let=.  This allows for dynamic symbol
	binding: the expression =(set 'hello "world")= evaluates its second
	argument at run-time, and sets the given symbol (in this case
	=hello=) to the given value.

*** Lexical environments
	Lexical environments are more complex. They are created when
	bindings arguments to a function or inside a =let= form. Closures
	can capture lexical environments, and it is stored within the
	closure. The environment register points to the current lexical
	environment, and changes every time a closure is called.

**** Lexical environment lookup
	 A lexical environment is, at the lowest level, an array that with
	 a pointer to its parent environment. Because of the nature of
	 lexical binding, the bound symbols are eliminated at
	 compile-time, and lookup can be fast.

#+begin_src lisp
(let ((a 45) (b 98))
  (let ((x 0) (y 56))
	(+ (* x a) (* y b) z)))
#+end_src

	 In the code snippet above, we don't have to search the lexical
	 environment for =x=, =y=, =a= and =b=, because their position is known at
	 compile time. As for =z=, it is not in the lexical environment, and
	 is known to be a global variable at compile time.

	 The generated code for the code snippet above would look like
	 this:

#+begin_src asm
fetch_literal 45
push
fetch_literal 98
push
fetch_literal 0
push
fetch_literal 56
push
lexical_var 1
push
lexical_var 4
push
fetch_global '*
call 2
push
lexical_var 1
push
lexical_var 4
push
fetch_global '*
call 2
push
fetch_global 'z
push
fetch_global '+
call 3
unbind 2
unbind 2
#+end_src

	 Lexical variables and function arguments are pushed on the stack,
	 and can be accessed in /O(1)/ time.

** Standard library
   The specials operators of a language makes what the language is,
   whereas the standard library makes what it can do. Even the best
   programming language is useless without a standard library.

*** Arithmetic
	~+~, ~-~, ~*~, ~/~, ~**~, are the basic number manipulation functions.
	~=~, ~<~, ~>~ for equality testing
